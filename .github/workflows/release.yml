name: Release Management

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.2.3)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        default: 'minor'
        type: choice
        options:
          - major
          - minor
          - patch
          - custom

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      release_branch: ${{ steps.branch.outputs.branch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event.inputs.release_type }}" == "custom" ]; then
            VERSION="v${{ github.event.inputs.version }}"
          else
            # Get latest tag
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            VERSION=$(npx semver $LATEST_TAG -i ${{ github.event.inputs.release_type }})
            VERSION="v${VERSION#v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"
          
      - name: Create release branch
        id: branch
        run: |
          BRANCH="release/${{ steps.version.outputs.version }}"
          git checkout -b $BRANCH
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          
      - name: Update version in package.json
        run: |
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version
          yarn install --frozen-lockfile
          
      - name: Update CHANGELOG
        run: |
          echo "# Changelog for ${{ steps.version.outputs.version }}" > CHANGELOG.tmp.md
          echo "" >> CHANGELOG.tmp.md
          echo "## What's Changed" >> CHANGELOG.tmp.md
          echo "" >> CHANGELOG.tmp.md
          git log --pretty=format:"* %s by @%an" $(git describe --tags --abbrev=0)..HEAD >> CHANGELOG.tmp.md
          echo "" >> CHANGELOG.tmp.md
          echo "" >> CHANGELOG.tmp.md
          cat CHANGELOG.md >> CHANGELOG.tmp.md 2>/dev/null || true
          mv CHANGELOG.tmp.md CHANGELOG.md
          
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: prepare release ${{ steps.version.outputs.version }}"
          title: "Release: ${{ steps.version.outputs.version }}"
          body: |
            ## Release ${{ steps.version.outputs.version }}
            
            This PR prepares the release for version ${{ steps.version.outputs.version }}.
            
            ### Checklist
            - [ ] Version bumped in package.json
            - [ ] CHANGELOG.md updated
            - [ ] All tests passing
            - [ ] Documentation updated
            - [ ] Mobile app versions updated
            
            ### Release Type
            ${{ github.event.inputs.release_type }}
            
            ### Next Steps
            1. Review and merge this PR
            2. The release workflow will automatically create a tag and release
          branch: ${{ steps.branch.outputs.branch }}
          base: main
          labels: release, automated
          
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: prepare-release
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'release')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Build application
        run: yarn build:prod
        
      - name: Build mobile apps
        run: |
          yarn cap:sync
          # Add mobile build steps here
          
      - name: Create release assets
        run: |
          mkdir -p release-assets
          zip -r release-assets/labflow-web-${{ needs.prepare-release.outputs.version }}.zip dist/
          # Add mobile app builds to release assets
          
      - name: Create Git tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a ${{ needs.prepare-release.outputs.version }} -m "Release ${{ needs.prepare-release.outputs.version }}"
          git push origin ${{ needs.prepare-release.outputs.version }}
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare-release.outputs.version }}
          name: Release ${{ needs.prepare-release.outputs.version }}
          body_path: CHANGELOG.md
          files: |
            release-assets/*
          draft: false
          prerelease: false
          
      - name: Deploy to production
        run: |
          echo "Triggering production deployment..."
          # Trigger CD workflow
          
      - name: Notify release
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            New release created: ${{ needs.prepare-release.outputs.version }}
            View release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.version }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          
  post-release:
    name: Post Release Tasks
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: success()
    steps:
      - name: Update documentation
        run: |
          echo "Updating documentation..."
          # Add documentation update steps
          
      - name: Create release notes
        run: |
          echo "Creating detailed release notes..."
          # Generate comprehensive release notes
          
      - name: Update demo environment
        run: |
          echo "Updating demo environment..."
          # Deploy to demo/sandbox environment