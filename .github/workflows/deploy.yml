name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '20.x'
  FIREBASE_PROJECT_ID: 'labsystem-a1'

jobs:
  deploy-web:
    name: Deploy Web Application
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run tests
        run: yarn test --run
        continue-on-error: true

      - name: Build production bundle
        run: yarn build
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
          VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}
          VITE_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          channelId: live
          projectId: ${{ env.FIREBASE_PROJECT_ID }}

      - name: Create deployment record
        run: |
          echo "Deployment completed at $(date)" >> deployment.log
          echo "Version: ${{ github.sha }}" >> deployment.log
          echo "Environment: ${{ github.event.inputs.environment || 'production' }}" >> deployment.log

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Web deployment to ${{ github.event.inputs.environment || 'production' }} ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  deploy-functions:
    name: Deploy Firebase Functions
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    needs: deploy-web
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'  # Functions require Node 18

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install functions dependencies
        working-directory: ./functions
        run: npm ci

      - name: Build functions
        working-directory: ./functions
        run: npm run build

      - name: Deploy Firebase Functions
        run: |
          firebase deploy --only functions --project ${{ env.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  deploy-rules:
    name: Deploy Security Rules
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    needs: deploy-web
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Test Firestore rules
        run: |
          npm install -g @firebase/rules-unit-testing
          firebase emulators:exec --only firestore "npm run test:rules"

      - name: Deploy Firestore rules
        run: |
          firebase deploy --only firestore:rules --project ${{ env.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Storage rules
        run: |
          firebase deploy --only storage:rules --project ${{ env.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  smoke-tests:
    name: Post-Deployment Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-web, deploy-functions, deploy-rules]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run smoke tests
        run: |
          npx playwright test tests/smoke/
        env:
          BASE_URL: https://labsystem-a1.web.app
          TEST_USER_EMAIL: ${{ secrets.SMOKE_TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.SMOKE_TEST_USER_PASSWORD }}

      - name: Health check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://labsystem-a1.web.app/api/health)
          if [ $response -ne 200 ]; then
            echo "Health check failed with status $response"
            exit 1
          fi

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: smoke-tests
    if: failure()
    steps:
      - name: Rollback Firebase Hosting
        run: |
          firebase hosting:rollback --project ${{ env.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "ï¿½ Deployment rolled back due to smoke test failure",
              color: "danger"
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}