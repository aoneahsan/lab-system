name: Mobile App CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'android/**'
      - 'ios/**'
      - 'capacitor.config.ts'
      - 'package.json'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'android/**'
      - 'ios/**'
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  JAVA_VERSION: '17'
  RUBY_VERSION: '3.0'

jobs:
  build-android:
    name: Build Android App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build web assets
        run: yarn build
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}

      - name: Sync Capacitor
        run: |
          npx cap sync android
          npx cap update android

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Android Debug APK
        working-directory: ./android
        run: ./gradlew assembleDebug

      - name: Build Android Release APK
        if: github.ref == 'refs/heads/main'
        working-directory: ./android
        run: |
          ./gradlew assembleRelease
        env:
          ANDROID_KEYSTORE_PATH: ${{ secrets.ANDROID_KEYSTORE_PATH }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: Upload Android APK
        uses: actions/upload-artifact@v3
        with:
          name: android-apk
          path: |
            android/app/build/outputs/apk/debug/*.apk
            android/app/build/outputs/apk/release/*.apk

      - name: Run Android Tests
        working-directory: ./android
        run: ./gradlew test

  build-ios:
    name: Build iOS App
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build web assets
        run: yarn build
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}

      - name: Sync Capacitor
        run: |
          npx cap sync ios
          npx cap update ios

      - name: Install CocoaPods
        working-directory: ./ios/App
        run: |
          gem install cocoapods
          pod install

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: ios/App/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Setup provisioning profile
        if: github.ref == 'refs/heads/main'
        env:
          IOS_PROVISION_PROFILE: ${{ secrets.IOS_PROVISION_PROFILE }}
          IOS_CERTIFICATE: ${{ secrets.IOS_CERTIFICATE }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain

          # Import certificate
          echo "$IOS_CERTIFICATE" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign

          # Import provisioning profile
          echo "$IOS_PROVISION_PROFILE" | base64 --decode > profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Build iOS App
        working-directory: ./ios/App
        run: |
          xcodebuild -workspace App.xcworkspace \
                     -scheme App \
                     -configuration Debug \
                     -sdk iphonesimulator \
                     -derivedDataPath build \
                     build

      - name: Build iOS Release
        if: github.ref == 'refs/heads/main'
        working-directory: ./ios/App
        run: |
          xcodebuild -workspace App.xcworkspace \
                     -scheme App \
                     -configuration Release \
                     -archivePath build/App.xcarchive \
                     archive

      - name: Export IPA
        if: github.ref == 'refs/heads/main'
        working-directory: ./ios/App
        run: |
          xcodebuild -exportArchive \
                     -archivePath build/App.xcarchive \
                     -exportPath build \
                     -exportOptionsPlist ExportOptions.plist

      - name: Upload iOS Build
        uses: actions/upload-artifact@v3
        with:
          name: ios-build
          path: |
            ios/App/build/*.ipa
            ios/App/build/*.xcarchive

  test-mobile:
    name: Mobile E2E Tests
    runs-on: macos-latest
    needs: [build-android, build-ios]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Appium
        run: |
          npm install -g appium
          appium driver install uiautomator2
          appium driver install xcuitest

      - name: Download Android APK
        uses: actions/download-artifact@v3
        with:
          name: android-apk
          path: ./test-apps

      - name: Start Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 33
          target: google_apis
          arch: x86_64
          script: |
            adb install ./test-apps/debug/*.apk
            npm run test:mobile:android

      - name: Start iOS Simulator
        run: |
          xcrun simctl boot "iPhone 14"
          xcrun simctl install "iPhone 14" ./test-apps/*.app
          npm run test:mobile:ios

  deploy-to-stores:
    name: Deploy to App Stores
    runs-on: ubuntu-latest
    needs: [build-android, build-ios, test-mobile]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download Android APK
        uses: actions/download-artifact@v3
        with:
          name: android-apk
          path: ./android-release

      - name: Download iOS IPA
        uses: actions/download-artifact@v3
        with:
          name: ios-build
          path: ./ios-release

      - name: Upload to Google Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          packageName: com.zaions.labflow
          releaseFiles: android-release/release/*.apk
          track: internal
          status: draft
          inAppUpdatePriority: 2
          whatsNewDirectory: whatsnew/

      - name: Upload to Apple App Store
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: ios-release/*.ipa
          issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          api-key-id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          api-private-key: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY }}

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Mobile apps deployed to stores'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
