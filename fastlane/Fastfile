# Fastlane configuration for LabFlow mobile apps

default_platform(:ios)

# iOS Lane Definitions
platform :ios do
  desc "Build and upload to TestFlight"
  lane :beta do
    # Ensure clean git state
    ensure_git_status_clean
    
    # Increment build number
    increment_build_number(xcodeproj: "ios/App/App.xcodeproj")
    
    # Build the app
    build_app(
      workspace: "ios/App/App.xcworkspace",
      scheme: "App",
      export_method: "app-store",
      clean: true,
      output_directory: "./build",
      output_name: "LabFlow.ipa"
    )
    
    # Upload to TestFlight
    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      notify_external_testers: false
    )
    
    # Commit version bump
    commit_version_bump(
      message: "Version bump for iOS beta build",
      xcodeproj: "ios/App/App.xcodeproj"
    )
    
    # Push to git
    push_to_git_remote
  end
  
  desc "Deploy to App Store"
  lane :release do
    # Ensure on main branch
    ensure_git_branch(branch: "main")
    
    # Build the app
    build_app(
      workspace: "ios/App/App.xcworkspace",
      scheme: "App",
      export_method: "app-store",
      clean: true
    )
    
    # Upload to App Store Connect
    upload_to_app_store(
      force: true,
      skip_metadata: false,
      skip_screenshots: false,
      submit_for_review: false,
      automatic_release: false,
      phased_release: true
    )
    
    # Create git tag
    add_git_tag(
      tag: "ios-v#{get_version_number}"
    )
  end
  
  desc "Create screenshots"
  lane :screenshots do
    capture_screenshots
    frame_screenshots(white: true)
  end
end

# Android Lane Definitions
platform :android do
  desc "Build and upload to Internal Testing"
  lane :beta do
    # Ensure clean git state
    ensure_git_status_clean
    
    # Increment version code
    gradle(
      task: "incrementVersionCode",
      project_dir: "android/"
    )
    
    # Build AAB
    gradle(
      task: "bundle",
      build_type: "Release",
      project_dir: "android/"
    )
    
    # Upload to Play Store
    upload_to_play_store(
      track: "internal",
      release_status: "draft",
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      aab: "android/app/build/outputs/bundle/release/app-release.aab"
    )
    
    # Commit version bump
    git_commit(
      path: ["android/app/build.gradle"],
      message: "Version bump for Android beta build"
    )
    
    # Push to git
    push_to_git_remote
  end
  
  desc "Deploy to Play Store"
  lane :release do
    # Ensure on main branch
    ensure_git_branch(branch: "main")
    
    # Build AAB
    gradle(
      task: "bundle",
      build_type: "Release",
      project_dir: "android/",
      properties: {
        "android.injected.signing.store.file" => ENV["ANDROID_KEYSTORE_PATH"],
        "android.injected.signing.store.password" => ENV["ANDROID_KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["ANDROID_KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["ANDROID_KEY_PASSWORD"]
      }
    )
    
    # Upload to Play Store
    upload_to_play_store(
      track: "production",
      release_status: "completed",
      rollout: "0.1", # 10% staged rollout
      skip_upload_metadata: false,
      skip_upload_images: false,
      skip_upload_screenshots: false
    )
    
    # Create git tag
    add_git_tag(
      tag: "android-v#{android_get_version_name}"
    )
  end
  
  desc "Create screenshots"
  lane :screenshots do
    gradle(
      task: "assembleDebug assembleAndroidTest",
      project_dir: "android/"
    )
    
    capture_android_screenshots
  end
end

# Cross-platform lanes
desc "Prepare release for both platforms"
lane :prepare_release do |options|
  version = options[:version]
  
  # Update version numbers
  ios_set_version(version: version)
  android_set_version(version: version)
  
  # Generate changelog
  changelog = generate_changelog
  
  # Update release notes
  update_release_notes(changelog: changelog)
  
  # Commit changes
  git_commit(
    path: [".", "ios/", "android/"],
    message: "Prepare release v#{version}"
  )
  
  # Create release branch
  sh("git checkout -b release/v#{version}")
  push_to_git_remote
end

# Helper methods
def generate_changelog
  changelog_from_git_commits(
    between: [last_git_tag, "HEAD"],
    pretty: "- %s",
    merge_commit_filtering: "exclude_merges"
  )
end

def update_release_notes(changelog:)
  File.write("../RELEASE_NOTES.md", changelog)
  File.write("../fastlane/metadata/android/en-US/changelogs/default.txt", changelog)
  File.write("../fastlane/metadata/ios/en-US/release_notes.txt", changelog)
end